{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAI5C,MAAM,OAAO,iBAAkB,SAAQ,SAAS;IAC9C,aAAa;QACX,OAAO,IAAI,OAAO,CAAM,CAAC,OAAO,EAAE,EAAE;YAClC,OAAO,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;QAC9B,CAAC,CAAC,CAAC;IACL,CAAC;IACD,KAAK,CAAC,UAAU;QACd,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IACD,KAAK,CAAC,2BAA2B,CAAC,OAAiD;QACjF,MAAM,IAAI,KAAK,CAAC,yBAAyB,GAAG,OAAO,CAAC,CAAC;IACvD,CAAC;IACD,KAAK,CAAC,iBAAiB;QACrB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IACD,KAAK,CAAC,gCAAgC,CAAC,OAAwD;QAC7F,MAAM,IAAI,KAAK,CAAC,yBAAyB,GAAG,OAAO,CAAC,CAAC;IACvD,CAAC;IACD,KAAK,CAAC,mBAAmB,CAAC,OAAiD;QACzE,MAAM,IAAI,KAAK,CAAC,yBAAyB,GAAG,OAAO,CAAC,CAAC;IACvD,CAAC;IACD,KAAK,CAAC,aAAa,CAAC,OAAwD;QAC1E,MAAM,IAAI,KAAK,CAAC,yBAAyB,GAAG,OAAO,CAAC,CAAC;IACvD,CAAC;IAED,KAAK,CAAC,aAAa,CAAC,OAAmD;QACrE,MAAM,IAAI,KAAK,CAAC,yBAAyB,GAAG,OAAO,CAAC,CAAC;IACvD,CAAC;CACF","sourcesContent":["import { WebPlugin } from '@capacitor/core';\n\nimport type { AccountManagerPlugin } from './definitions';\n\nexport class AccountManagerWeb extends WebPlugin implements AccountManagerPlugin {\n  accountPicker(): Promise<{ result: any }> {\n    return new Promise<any>((resolve) => {\n      resolve({ \"result\": true });\n    });\n  }\n  async getAccount(): Promise<{}> {\n    throw new Error('Method not implemented.');\n  }\n  async getExistingAccountAuthToken(options: { account: any; authTokenType: string; }): Promise<void> {\n    throw new Error('Method not implemented.' + options);\n  }\n  async showAccountPicker(): Promise<void> {\n    throw new Error('Method not implemented.');\n  }\n  async getTokenForAccountCreateIfNeeded(options: { accountType: string; authTokenType: string; }): Promise<void> {\n    throw new Error('Method not implemented.' + options);\n  }\n  async invalidateAuthToken(options: { account: any; authTokenType: string; }): Promise<void> {\n    throw new Error('Method not implemented.' + options);\n  }\n  async addNewAccount(options: { accountType: string; authTokenType: string; }): Promise<void> {\n    throw new Error('Method not implemented.' + options);\n  }\n\n  async authenticator(options: { userName: string; AccountType: string; }): Promise<void> {\n    throw new Error('Method not implemented.' + options);\n  }\n}\n"]}